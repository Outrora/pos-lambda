name: Subir Para AWS

on:
    push:
      branches:
        - master
    pull_request:
      branches:
        - master

jobs:
    build_lambda:
        name: Build e Empacotar a Lambda
        runs-on: ubuntu-latest
    
        steps:
            - name: Checkout do repositório
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                node-version: '22'
                cache: npm
                cache-dependency-path: projeto/package-lock.json

      
            - name: Install dependencies
              run: |
                cd projeto
                npm install
      
            - name: Criar zip
              run: |
                cd projeto
                zip -r ../lambda.zip .

            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                name: lambda-zip
                path: lambda.zip
            

    terraform:
      name: Deploy da Infra com Terraform
      runs-on: ubuntu-latest
      needs: build_lambda

      steps:
        - name: Checkout do repositório
          uses: actions/checkout@v3

        - name: Download artifact
          uses: actions/download-artifact@v3
          with:
            name: lambda-zip

        - name: Configurar o Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.5.6

  
        - name: Configurar credenciais da AWS
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          run: |
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            aws sts get-caller-identity
            echo "Configuração da AWS completa."
  
        - name: Inicializar o Terraform
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          run: terraform init
  
        - name: Validar o Terraform
          run: terraform validate
  
        - name: Planejar a infraestrutura
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
            AWS_EC2_METADATA_DISABLED: "true" 
          run: terraform plan -var="TAGS=${{ secrets.TAGS }}" -var="NOME=${{ secrets.NOMEPROJETO }}" -var="DB_PASSWORD=${{ secrets.DB_PASSWORD }}" -var="DB_USER=${{ secrets.DB_USER }}" -var="SECRET_KEY=${{ secrets.SECRET_KEY }}"
  
        - name: Aplicar o Terraform
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
            AWS_EC2_METADATA_DISABLED: "true" 
          run: terraform apply -var="TAGS=${{ secrets.TAGS }}" -var="NOME=${{ secrets.NOMEPROJETO }}" -var="DB_PASSWORD=${{ secrets.DB_PASSWORD }}" -var="DB_USER=${{ secrets.DB_USER }}" -var="SECRET_KEY=${{ secrets.SECRET_KEY }}" -auto-approve
  

      
